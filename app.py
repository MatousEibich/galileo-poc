"""Streamlit chatbot ‚Äì fixed quick‚Äëprompt flow & continuous input
Creates a seamless UX: chat input is always on screen; quick‚Äëprompt buttons
no longer hide it and conversation can proceed in the same rerun.
"""

import os
from datetime import datetime
from zoneinfo import ZoneInfo

import streamlit as st
from dotenv import load_dotenv

from langchain.agents.agent_types import AgentType
from langchain_experimental.agents.agent_toolkits import create_csv_agent
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain.memory import ConversationBufferMemory
from langchain.callbacks.streamlit import StreamlitCallbackHandler

# -----------------------------------------------------------------------------
# 1Ô∏è‚É£  ENV + MODEL SET‚ÄëUP
# -----------------------------------------------------------------------------
load_dotenv()
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")
LOCAL_TZ = ZoneInfo("Europe/Prague")
CURRENT_TIME = datetime.now(LOCAL_TZ).strftime("%Y-%m-%d %H:%M (%Z)")
print(CURRENT_TIME)

# -----------------------------------------------------------------------------
# 2Ô∏è‚É£  PROMPT
# -----------------------------------------------------------------------------
SYSTEM_PROMPT = f"""
You are a Czech‚Äëspeaking municipal‚Äëdata assistant with Python execution rights.
Three pandas DataFrames are pre‚Äëloaded for you:

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1.  df1  ‚Äì √ö≈òEDN√ç DESKA (official public notices)
    Columns
      ‚Ä¢ nazev_cs            ‚Äì headline of the notice (str)
      ‚Ä¢ vytvoreno           ‚Äì creation timestamp (ISO str)
      ‚Ä¢ vyveseni            ‚Äì posting date (str YYYY‚ÄëMM‚ÄëDD)
      ‚Ä¢ relevantni_do       ‚Äì expiry date or \"nespecifikovan√Ω\"
      ‚Ä¢ cislo_jednaci       ‚Äì docket / file number (str)
      ‚Ä¢ spisova_znacka      ‚Äì case reference (str)
      ‚Ä¢ agenda_names        ‚Äì semicolon list of agenda names (str)
      ‚Ä¢ document_urls       ‚Äì semicolon list of source files (str)

2.  df2  ‚Äì UD√ÅLOSTI (events & happenings)
    Columns
      ‚Ä¢ nazev_cs, popis_cs  ‚Äì title & description (str)
      ‚Ä¢ zacatek, konec      ‚Äì start/end timestamps (ISO str or None)
      ‚Ä¢ vhodne_pro_detii    ‚Äì bool (child‚Äëfriendly)
      ‚Ä¢ vhodne_pro_zvirata  ‚Äì bool (pet‚Äëfriendly)
      ‚Ä¢ poradatele          ‚Äì organisers (semicolon str)
      ‚Ä¢ adresa              ‚Äì location text (str)
      ‚Ä¢ image_urls          ‚Äì semicolon str of images
      In the current setup, this containts only two rows 
       - two rows with the same subject "Zased√°n√≠ Zastupitelstva mƒõsta Hor≈°ovsk√Ω T√Ωn"
       - this df should be only used when talking about "Zased√°n√≠ Zastupitelstva" and similar

3.  df3  ‚Äì AKTUALITY (news flashes)
    Columns
      ‚Ä¢ nazev_cs, popis_cs  ‚Äì headline & body (str)
      ‚Ä¢ vytvoreno           ‚Äì creation timestamp
      ‚Ä¢ relevantni_do       ‚Äì expiry timestamp or \"nespecifikovan√Ω\"
      ‚Ä¢ oznamovatel_ico     ‚Äì announcer's company ID (str or None)
      ‚Ä¢ oznamovatel_nazev_cs‚Äì announcer's name (str)
      ‚Ä¢ priloha_urls        ‚Äì semicolon str of attachments
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

‚ñ≤  ALWAYS:
   ‚Ä¢ Think step‚Äëby‚Äëstep before coding.
   ‚Ä¢ Show and cite every column you read.
   ‚Ä¢ Return answers in *concise Czech*.

‚ñ≤  NON‚ÄëEXACT MATCHING POLICY  (apply in this order):
   1.  **Case & diacritics** ‚Äì compare strings case‚Äëinsensitively and
       ignore Czech accents (t√Ωn == Tyn).
   2.  **Substring / contains** ‚Äì treat a query as a substring match
       if no full match is found.
   3.  **Fuzzy similarity** ‚Äì use Python helper:

         from difflib import SequenceMatcher
         def similar(a, b, threshold=0.80):
             return SequenceMatcher(None, a, b).ratio() >= threshold

       Apply to textual columns; threshold ‚â• 0.80.
   4.  **Date proximity** ‚Äì when matching by date, allow ¬±1 day.
   5.  **Numeric codes** ‚Äì strip whitespace and punctuation
       (e.g., \"SP/2024‚Äë004\" ‚âà \"SP 2024 004\").

   Logically justify in the answer whenever you fall back to a fuzzy rule.

Current local date & time: {CURRENT_TIME}
YOU ABSOLUTELY NEED TO KEEP THE CURRENT TIME IN MIND WHEN ANSWERING THE USER'S QUESTION.
IF THE USER ASKS ABOUT "P≈ò√ç≈†T√ç" or "MINUL√â", the current date is super important. 

If you need more data, ask the user first; do **not** fetch the web.
"""

PROMPT = ChatPromptTemplate.from_messages([
    ("system", SYSTEM_PROMPT),
    ("system", "Dosavadn√≠ konverzace:\n{chat_history}"),
    ("human", "{input}"),
])

# -----------------------------------------------------------------------------
# 3Ô∏è‚É£  AGENT FACTORY (cached)
# -----------------------------------------------------------------------------
@st.cache_resource(show_spinner=False)
def get_agent():
    memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
    return create_csv_agent(
        ChatOpenAI(temperature=0, model="gpt-4o-mini"),
        [
            "data/uredni_deska.csv",
            "data/udalosti.csv",
            "data/aktuality.csv",
        ],
        prompt=PROMPT,
        verbose=True,
        agent_type=AgentType.OPENAI_FUNCTIONS,
        allow_dangerous_code=True,
        memory=memory,
    )

agent = get_agent()

# -----------------------------------------------------------------------------
# 4Ô∏è‚É£  UI LAYOUT
# -----------------------------------------------------------------------------
st.set_page_config(page_title="Hor≈°ovsk√Ω T√Ωn ‚Äì Chatbot", page_icon="üóÇÔ∏è", layout="wide")

with st.sidebar:
    st.image("logo.png", width=160, caption="Mƒõsto Hor≈°ovsk√Ω T√Ωn")
    st.markdown("##### Chatbot mƒõstsk√Ωch dat")

    st.divider()

    st.markdown("**Rychl√© dotazy:**")
    if st.button(":wastebasket: Svoz odpadu"):
        st.session_state["preset_query"] = "M√°≈° nƒõjak√© informace o svozu odpadu?"
    if st.button(":office: Zased√°n√≠ zastupitelstva"):
        st.session_state["preset_query"] = "Kdy je p≈ô√≠≈°t√≠ zased√°n√≠ zastupitelstva?"

    st.divider()
    show_thoughts = st.checkbox(":brain: Zobrazit my≈°len√≠ agenta", value=True)
    st.divider()
    if "history" in st.session_state and st.session_state.history:
        transcript = "\n\n".join(f"{role.upper()}: {txt}" for role, txt in st.session_state.history)
        st.download_button("‚¨áÔ∏è St√°hnout p≈ôepis", transcript, "chat_p≈ôepis.txt", "text/plain")

# -----------------------------------------------------------------------------
# 5Ô∏è‚É£  CHAT PANEL
# -----------------------------------------------------------------------------
st.title("üóÇÔ∏è Chatbot mƒõstsk√Ωch dat")

# Ensure history exists
if "history" not in st.session_state:
    st.session_state.history = []

# ---- primary chat input (always visible) ----
primary_input = st.chat_input("Zadejte dotaz‚Ä¶", key="main_input")

# A preset query (from quick button) overrides keyboard input for this turn
user_query = st.session_state.pop("preset_query", None) or primary_input

# Render chat history
for role, message in st.session_state.history:
    with st.chat_message(role):
        st.markdown(message, unsafe_allow_html=True)

# ---- process new user query ----
if user_query:
    with st.chat_message("user"):
        st.markdown(user_query)
    st.session_state.history.append(("user", user_query))

    with st.chat_message("assistant"):
        cb_container = st.container()
        cb_handler = StreamlitCallbackHandler(cb_container) if show_thoughts else None
        with st.spinner("Zpracov√°v√°m dotaz‚Ä¶"):
            answer = agent.run(user_query, callbacks=[cb_handler] if cb_handler else None)
        st.markdown(answer, unsafe_allow_html=True)
    st.session_state.history.append(("assistant", answer))

