import streamlit as st
from dotenv import load_dotenv
import os

from langchain.agents.agent_types import AgentType
from langchain_experimental.agents.agent_toolkits import create_csv_agent
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain.memory import ConversationBufferMemory
from langchain.callbacks.streamlit import StreamlitCallbackHandler

# -----------------------------------------------------------------------------
# 1Ô∏è‚É£  ENV + MODEL SET‚ÄëUP  (runs once at app start)
# -----------------------------------------------------------------------------
load_dotenv()
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")

# -----------------------------------------------------------------------------
# 2Ô∏è‚É£  PROMPT  (your original, + chat history placeholder)
# -----------------------------------------------------------------------------
SYSTEM_PROMPT = """
You are a Czech‚Äëspeaking municipal‚Äëdata assistant with Python execution rights.
Three pandas DataFrames are pre‚Äëloaded for you:

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1.  df1  ‚Äì √ö≈òEDN√ç DESKA (official public notices)
    Columns
      ‚Ä¢ nazev_cs            ‚Äì headline of the notice (str)
      ‚Ä¢ vytvoreno           ‚Äì creation timestamp (ISO str)
      ‚Ä¢ vyveseni            ‚Äì posting date (str YYYY‚ÄëMM‚ÄëDD)
      ‚Ä¢ relevantni_do       ‚Äì expiry date or \"nespecifikovan√Ω\"
      ‚Ä¢ cislo_jednaci       ‚Äì docket / file number (str)
      ‚Ä¢ spisova_znacka      ‚Äì case reference (str)
      ‚Ä¢ agenda_names        ‚Äì semicolon list of agenda names (str)
      ‚Ä¢ document_urls       ‚Äì semicolon list of source files (str)

2.  df2  ‚Äì UD√ÅLOSTI (events & happenings)
    Columns
      ‚Ä¢ nazev_cs, popis_cs  ‚Äì title & description (str)
      ‚Ä¢ zacatek, konec      ‚Äì start/end timestamps (ISO str or None)
      ‚Ä¢ vhodne_pro_detii    ‚Äì bool (child‚Äëfriendly)
      ‚Ä¢ vhodne_pro_zvirata  ‚Äì bool (pet‚Äëfriendly)
      ‚Ä¢ poradatele          ‚Äì organisers (semicolon str)
      ‚Ä¢ adresa              ‚Äì location text (str)
      ‚Ä¢ image_urls          ‚Äì semicolon str of images

3.  df3  ‚Äì AKTUALITY (news flashes)
    Columns
      ‚Ä¢ nazev_cs, popis_cs  ‚Äì headline & body (str)
      ‚Ä¢ vytvoreno           ‚Äì creation timestamp
      ‚Ä¢ relevantni_do       ‚Äì expiry timestamp or \"nespecifikovan√Ω\"
      ‚Ä¢ oznamovatel_ico     ‚Äì announcer's company ID (str or None)
      ‚Ä¢ oznamovatel_nazev_cs‚Äì announcer's name (str)
      ‚Ä¢ priloha_urls        ‚Äì semicolon str of attachments
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

‚ñ≤  ALWAYS:
   ‚Ä¢ Think step‚Äëby‚Äëstep before coding.
   ‚Ä¢ Show and cite every column you read.
   ‚Ä¢ Return answers in *concise Czech*.

‚ñ≤  NON‚ÄëEXACT MATCHING POLICY  (apply in this order):
   1.  **Case & diacritics** ‚Äì compare strings case‚Äëinsensitively and
       ignore Czech accents (t√Ωn == Tyn).
   2.  **Substring / contains** ‚Äì treat a query as a substring match
       if no full match is found.
   3.  **Fuzzy similarity** ‚Äì use Python helper:

         from difflib import SequenceMatcher
         def similar(a, b, threshold=0.80):
             return SequenceMatcher(None, a, b).ratio() >= threshold

       Apply to textual columns; threshold ‚â• 0.80.
   4.  **Date proximity** ‚Äì when matching by date, allow ¬±1 day.
   5.  **Numeric codes** ‚Äì strip whitespace and punctuation
       (e.g., \"SP/2024‚Äë004\" ‚âà \"SP 2024 004\").

   Logically justify in the answer whenever you fall back to a fuzzy rule.

If you need more data, ask the user first; do **not** fetch the web.
"""

PROMPT = ChatPromptTemplate.from_messages([
    ("system", SYSTEM_PROMPT),
    ("system", "Dosavadn√≠ konverzace:\n{chat_history}"),
    ("human", "{input}"),
])

# -----------------------------------------------------------------------------
# 3Ô∏è‚É£  AGENT FACTORY  (cached ‚Äì CSVs + memory loaded once)
# -----------------------------------------------------------------------------
@st.cache_resource(show_spinner=False)
def get_agent():
    memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
    return create_csv_agent(
        ChatOpenAI(temperature=0, model="gpt-4o-mini"),
        [
            "data/uredni_deska.csv",
            "data/udalosti.csv",
            "data/aktuality.csv",
        ],
        prompt=PROMPT,
        verbose=True,               # must be True so callbacks stream thoughts
        agent_type=AgentType.OPENAI_FUNCTIONS,
        allow_dangerous_code=True,
        memory=memory,
    )

agent = get_agent()

# -----------------------------------------------------------------------------
# 4Ô∏è‚É£  STREAMLIT PAGE LAYOUT
# -----------------------------------------------------------------------------
st.set_page_config(page_title="üóÇÔ∏è Municip√°ln√≠ data ‚Äì Chatbot", page_icon="üóÇÔ∏è")
st.title("üóÇÔ∏è Municip√°ln√≠ data ‚Äì Chatbot")

# Chat history across reruns
if "history" not in st.session_state:
    st.session_state.history = []

# üîÑ Render conversation so far (without current turn)
for role, msg in st.session_state.history:
    with st.chat_message(role):
        st.markdown(msg)

# ‚ÑπÔ∏è  Input box
user_query = st.chat_input("Zadejte dotaz‚Ä¶")

if user_query:
    # ‚û§ Show the user's message immediately
    with st.chat_message("user"):
        st.markdown(user_query)
    st.session_state.history.append(("user", user_query))

    # ‚û§ Assistant thinking + final answer
    with st.chat_message("assistant"):
        callback_container = st.container()  # where StreamlitCallbackHandler streams
        cb_handler = StreamlitCallbackHandler(callback_container)
        with st.spinner("Zpracov√°v√°m dotaz‚Ä¶"):
            answer = agent.run(user_query, callbacks=[cb_handler])
        st.markdown(answer)
    st.session_state.history.append(("assistant", answer))
